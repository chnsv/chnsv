#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

vector<vector<int>> Add(const vector<vector<int>>& A, const vector<vector<int>>& B, int &count) {
    int n = A.size();
    vector<vector<int>> result(n, vector<int>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            result[i][j] = A[i][j] + B[i][j];
            count++;
        }
    }
    return result;
}

vector<vector<int>> Sub(const vector<vector<int>>& A, const vector<vector<int>>& B, int& count) {
    int n = A.size();
    vector<vector<int>> result(n, vector<int>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            result[i][j] = A[i][j] - B[i][j];
            count++;
        }
    }
    return result;
}

vector<vector<int>> StrassenMult(const vector<vector<int>>& A, const vector<vector<int>>& B, int& count) {
    int n = A.size();
    vector<vector<int>> result(n, vector<int>(n, 0));
    if (n == 1) {
        result[0][0] = A[0][0] * B[0][0];
        count++;
    }
    else {
        int newSize = n / 2;
        vector<vector<int>> A11(newSize, vector<int>(newSize));
        vector<vector<int>> A12(newSize, vector<int>(newSize));
        vector<vector<int>> A21(newSize, vector<int>(newSize));
        vector<vector<int>> A22(newSize, vector<int>(newSize));
        vector<vector<int>> B11(newSize, vector<int>(newSize));
        vector<vector<int>> B12(newSize, vector<int>(newSize));
        vector<vector<int>> B21(newSize, vector<int>(newSize));
        vector<vector<int>> B22(newSize, vector<int>(newSize));
        for (int i = 0; i < newSize; i++) {
            for (int j = 0; j < newSize; j++) {
                A11[i][j] = A[i][j];
                A12[i][j] = A[i][j + newSize];
                A21[i][j] = A[i + newSize][j];
                A22[i][j] = A[i + newSize][j + newSize];
                B11[i][j] = B[i][j];
                B12[i][j] = B[i][j + newSize];
                B21[i][j] = B[i + newSize][j];
                B22[i][j] = B[i + newSize][j + newSize];
            }
        }
        vector<vector<int>>P1, P2, P3, P4, P5, P6, P7;
        StrassenMult(Add(A11, A22, count), Add(B11, B22, count), count);
        StrassenMult(Add(A21, A22, count), B11, count);
        StrassenMult(A11, Sub(B12, B22, count), count);
        StrassenMult(A22, Sub(B21, B11, count), count);
        StrassenMult(Add(A11, A12, count), B22, count);
        StrassenMult(Sub(A21, A11, count), Add(B11, B12, count), count);
        StrassenMult(Sub(A12, A22, count), Add(B21, B22, count), count);

        vector<vector<int>> C11 = Add(Sub(Add(P1, P4, count), P5, count), P7, count);
        vector<vector<int>> C12 = Add(P3, P5, count);
        vector<vector<int>> C21 = Add(P2, P4, count);
        vector<vector<int>> C22 = Add(Sub(Add(P1, P3, count), P2, count), P6, count);

        for (int i = 0; i < newSize; i++) {
            for (int j = 0; j < newSize; j++) {
                result[i][j] = C11[i][j];
                result[i][j + newSize] = C12[i][j];
                result[i + newSize][j] = C21[i][j];
                result[i + newSize][j + newSize] = C22[i][j];
            }
        }
    }
    return result;
}

int main()
{
    int n = 4;
    vector<vector<int>>A(n, vector<int>(n, 1));
    vector<vector<int>>B(n, vector<int>(n, 2));
    int count;
    for (int size = 4; size <= 1024; size *= 2) {
        count = 0; 
        auto start = chrono::high_resolution_clock::now();
        StrassenMult(A, B, count);
        auto end = chrono::high_resolution_clock::now();
        chrono::duration<double> duration = end - start;
        cout << "Size: " << size << ", Scalar Ops: " << count << ", Time: " << duration.count() << "s" << endl;
    }
    return 0;
}
