#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <string>
#include <windows.h>
#include <iostream>
#include <queue>
#include <thread>
#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable: 4996)
using namespace std;
#define SRV_HOST "localhost"  //адрес сервера
#define SRV_PORT 1234 //порт сервера
#define CLNT_PORT 1235  //порт клиента
#define BUF_SIZE 64  //размер сообщений

struct Message {
    char name[20];
    char text[120];
} get_mess, send_mess;

SOCKET Connection;
char buff[10 * 1014];

void getMessage() {
    while (1) {
        int size = recv(Connection, (char*)&get_mess, sizeof(get_mess), 0);
        //Функция recv получает данные от подключенного сокета или связанного сокета без соединения.
        //1 - Дескриптор, идентифицирующий подключенный сокет.
        //2 - Указатель на буфер для получения входящих данных.
        //3 - Длина буфера (в байтах).
        //4 - Набор флагов, влияющих на поведение данной функции.
        if (size >= 0) {
            // отсекаем сообщения которые отправляли мы
            if (string(get_mess.name).compare(string(send_mess.name)))
                //сравнение строк
                cout << "send [" << get_mess.name << "]:" << get_mess.text << endl;
        }
    }
    closesocket(Connection);
    Connection = INVALID_SOCKET;
    //Если ошибка не возникает, socket возвращает дескриптор, ссылающийся 
    // на новый сокет. В противном случае возвращается значение INVALID_SOCKET
    return;
}

int connectToServer() {
    cout << "TCP Chat Client\n";
    // Шаг 1 - иницилизация библиотеки Winsocks
    if (WSAStartup(0x202, (WSADATA*)&buff)) //Eror!
    {
        cout << "WSASTARTUP ERROR: " << WSAGetLastError() << "\n";
        return 1;
    }
    int from_len;
    char buf[BUF_SIZE] = { 0 };
    hostent* hp;
    sockaddr_in clnt_sin, srv_sin;
    Connection = socket(AF_INET, SOCK_STREAM, 0);
    //Функция socket создает сокет.
    //1 - Семейство адресов IPv4
    //2 - ТИП. Тип сокета, обеспечивающий последовательные, надежные, двусторонние потоки байтов
    //3 - Используемый протокол. 
    clnt_sin.sin_family = AF_INET;
    clnt_sin.sin_addr.s_addr = 0;
    clnt_sin.sin_port = htons(CLNT_PORT);
    bind(Connection, (sockaddr*)&clnt_sin, sizeof(clnt_sin));
    //Функция bind связывает локальный адрес с сокетом.
    //1 - Дескриптор, идентифицирующий несвязанный сокет.
    //2 - Указатель на структуру sockaddr локального адреса, который должен быть назначен связанному сокету.
    //3 - Длина (в байтах) значения.
    hp = gethostbyname(SRV_HOST);
    //Функция gethostbyname извлекает информацию о хосте, 
    //соответствующую имени хоста, из базы данных хостов.
    srv_sin.sin_port = htons(SRV_PORT);
    //Функция htons преобразует u_short от хоста в порядок байтов сети TCP/IP.
    srv_sin.sin_family = AF_INET;
    ((unsigned long*)&srv_sin.sin_addr)[0] = ((unsigned long**)hp->h_addr_list)[0][0];
    connect(Connection, (sockaddr*)&srv_sin, sizeof(srv_sin));
    //Функция connect устанавливает соединение с указанным сокетом.
    //1 - Дескриптор, идентифицирующий неподключенный сокет.
    //2 - Указатель на структуру sockaddr, к которой должно быть установлено соединение.
    //3 - Длина (в байтах) структуры sockaddr.
    return 0;
}

int main()
{
    // подключаемся к серверу
    if (connectToServer())
        return -1;
    cout << "Your name: ";
    cin >> send_mess.name;

    // создаем поток на получение сообщений от сервера
    thread tread(getMessage);
    //thread - Создает и контролирует поток, задает приоритет и возвращает статус.

    tread.detach(); //Отсоединяет связанный поток от объекта thread.

    while (1)
    {
        // вводим сообщение
        cin >> send_mess.text;
        // отправляем
        send(Connection, (char*)&send_mess, sizeof(send_mess), 0);
        // если введена команда для выхода, выходим
        if (!string(send_mess.text).compare(string("!exit")))
        {
            break;
        }
    }
    // шаг последний - выход
    closesocket(Connection);
    WSACleanup();
    return 0;
}
