#include <iostream>
#include <vector>
using namespace std;

void dfs(int v, vector<vector<int>>& adj, vector<bool>& visited, int parent, bool& hasCycle) {
	visited[v] = true;
	for (int u : adj[v]) {
		if (!visited[u]) {
			dfs(u, adj, visited, v, hasCycle);
		}
		else if (u != parent) {
			hasCycle = true;
		}
	}
}

bool isTree(vector<vector<int>>& adj) {
	int n = adj.size();
	vector<bool>visited(n, false);
	bool hasCycle = false;
	dfs(0, adj, visited, -1, hasCycle);
	if (hasCycle) {
		return false;
	}
	for (bool v : visited) {
		if (!v) {
			return false;
		}
	}
	return true;
}
int main()
{
	setlocale(LC_ALL, "rus");
	vector<vector<int>> adj = {
		//5 Положительных тестов
		//1
		{0,1,1,0,0,0,0,0},
		{1,0,0,1,1,0,0,0},
		{1,0,0,0,0,0,0,1},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,1,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,1,0,0,0,0,0}
		//2
		//3
		//4
		//5
		//5 Отрицательных тестов
		//1
		/*{0,1,1,0,0},
		{1,0,0,1,0},
		{1,0,0,0,1},
		{0,1,0,0,0},
		{0,0,1,0,0}*/
		//2
		/*{0,1,0,0,0,0,0,1},
		{1,0,1,1,1,0,0,0},
		{0,1,0,1,0,1,1,0},
		{0,1,1,0,1,1,1,0},
		{0,1,0,1,0,0,0,0},
		{0,0,1,1,0,0,0,0},
		{0,0,1,1,0,0,0,1},
		{1,0,0,0,0,0,1,0}*/
		//3 
		//4
		//5
	};
	bool isTreeGraph = isTree(adj);
	if (isTreeGraph) {
		cout << "Граф является деревом" << endl;
	}
	else {
		cout << "Граф не является деревом" << endl;
	}
	return 0;
}
