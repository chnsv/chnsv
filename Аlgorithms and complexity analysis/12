#include <iostream>
#include <vector>
using namespace std;

long long k = 0;

vector<vector<int>> Generate(int n) {
    vector<int>v(n, 0);
    vector<vector<int>> M(n, v);
    for (vector<int>& vect : M) {
        for (int& element : vect) {
            element = rand() % 10;
        }
    }
    return M;
}
void print(vector<vector<int>>M) {
    for (vector<int>vect : M) {
        for (int element : vect) {
            cout << element << " ";
        }
        cout << endl;
    }
}

// Функция для сложения двух матриц
vector<vector<int>> Add(vector<vector<int>>& A, vector<vector<int>>& B) {
    vector<int> v(A[0].size(), 0);
    vector<vector<int>> result(A.size(),v);
    for (int i = 0; i < A.size(); i++) {
        for (int j = 0; j < A[0].size(); j++) {
            result[i][j] = A[i][j] + B[i][j];
            k++; // Увеличиваем счетчик скалярных операций
        }
    }
    return result;
}

// Функция для вычитания двух матриц
vector<vector<int>> Sub(vector<vector<int>>& A, vector<vector<int>>& B) {
    vector<int> v(A[0].size(), 0);
    vector<vector<int>> result(A.size(), v);
    for (int i = 0; i < A.size(); i++) {
        for (int j = 0; j < A[0].size(); j++) {
            result[i][j] = A[i][j] - B[i][j];
            k++; // Увеличиваем счетчик скалярных операций
        }
    }
    return result;
}

// Функция для перемножения квадратных матриц по методу Штрассена с учетом количества скалярных операций
vector<vector<int>> StrassenMult(vector<vector<int>>& A, vector<vector<int>>& B) {
    vector<int> v(A[0].size(), 0);
    vector<vector<int>> result(A.size(), v);
    if (A.size() == 1) {
        result[0][0] = A[0][0] * B[0][0];
        k++; // Увеличиваем счетчик скалярных операций
    }
    else {
        // Разбиваем матрицы на четыре части
        int newSize = A.size() / 2;
        vector<vector<int>> A11(newSize, vector<int>(newSize));
        vector<vector<int>> A12(newSize, vector<int>(newSize));
        vector<vector<int>> A21(newSize, vector<int>(newSize));
        vector<vector<int>> A22(newSize, vector<int>(newSize));
        vector<vector<int>> B11(newSize, vector<int>(newSize));
        vector<vector<int>> B12(newSize, vector<int>(newSize));
        vector<vector<int>> B21(newSize, vector<int>(newSize));
        vector<vector<int>> B22(newSize, vector<int>(newSize));

        // Заполняем части матриц
        for (int i = 0; i < newSize; i++) {
            for (int j = 0; j < newSize; j++) {
                A11[i][j] = A[i][j];
                A12[i][j] = A[i][j + newSize];
                A21[i][j] = A[i + newSize][j];
                A22[i][j] = A[i + newSize][j + newSize];
                B11[i][j] = B[i][j];
                B12[i][j] = B[i][j + newSize];
                B21[i][j] = B[i + newSize][j];
                B22[i][j] = B[i + newSize][j + newSize];
            }
        }
        // Вычисляем вспомогательные матрицы
        vector<vector<int>> P1, P2, P3, P4, P5, P6, P7;
        StrassenMult(Add(A11, A22), Add(B11, B22)); // P1 = (A11 + A22) * (B11 + B22)
        StrassenMult(Add(A21, A22), B11); // P2 = (A21 + A22) * B11
        StrassenMult(A11, Sub(B12, B22)); // P3 = A11 * (B12 - B22)
        StrassenMult(A22, Sub(B21, B11)); // P4 = A22 * (B21 - B11)
        StrassenMult(Add(A11, A12), B22); // P5 = (A11 + A12) * B22
        StrassenMult(Sub(A21, A11), Add(B11, B12)); // P6 = (A21 - A11) * (B11 + B12)
        StrassenMult(Sub(A12, A22), Add(B21, B22)); // P7 = (A12 - A22) * (B21 + B22)

        // Вычисляем части результирующей матрицы
        vector<vector<int>> C11 = Add(Sub(Add(P1, P4), P5), P7); // C11 = P1 + P4 - P5 + P7
        vector<vector<int>> C12 = Add(P3, P5); // C12 = P3 + P5
        vector<vector<int>> C21 = Add(P2, P4); // C21 = P2 + P4
        vector<vector<int>> C22 = Add(Sub(Add(P1, P3), P2), P6); // C22 = P1 + P3 - P2 + P6

        // Собираем результирующую матрицу из частей
        for (int i = 0; i < newSize; i++) {
            for (int j = 0; j < newSize; j++) {
                result[i][j] = C11[i][j];
                result[i][j + newSize] = C12[i][j];
                result[i + newSize][j] = C21[i][j];
                result[i + newSize][j + newSize] = C22[i][j];
            }
        }
    }
    return result;
}

int main() {
    for (int i = 2; i <= 1024; i *= 2) {
        vector<vector<int>> A = Generate(i);
        //print(A);
        vector < vector<int>> B = Generate(i);
        //print(B);

    }
}
